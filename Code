//scr_get_input
right_key = keyboard_check(vk_right);
left_key = keyboard_check(vk_left);
up_key = keyboard_check(vk_up);
down_key = keyboard_check(vk_down);
dash_key = keyboard_check_pressed(ord("C"));
swish_key = keyboard_check_pressed(ord("X"));

//Get the axis
xaxis = (right_key - left_key);
yaxis = (down_key - up_key);

//Check for gamepad input
if (gamepad_is_connected(0)) {
    gamepad_set_axis_deadzone(0, .35);
    xaxis = gamepad_axis_value(0, gp_axislh);
    yaxis = gamepad_axis_value(0, gp_axislv);
    dash_key = gamepad_button_check_pressed(0, gp_face1);
    swish_key = gamepad_button_check_pressed(0, gp_face3);
    }
    
   
//scr_move_state
scr_get_input();

if (dash_key) {
state = scr_dash_state;
alarm[0] = room_speed/6;
}

if (swish_key) {
image_index = 0;
state = scr_swish_state;

}

//Get the axis
var xaxis = (right_key - left_key);
var yaxis = (down_key - up_key);

//Get Direction
dir = point_direction(0, 0, xaxis, yaxis);

//Get Length
if (xaxis == 0 and yaxis = 0) {
    len = 0;
} else {
    len = spd;
}

//Move
hsp = lengthdir_x(len, dir);
vsp = lengthdir_y(len, dir);

phy_position_x += hsp;
phy_position_y += vsp;

//Animation
image_speed = sign(len)*0.2;
if (len == 0) image_index = 0;

if (vsp > 0 ) {
    sprite_index = spr_player_down;
} else if (vsp < 0) {
    sprite_index = spr_player_up;
}

if (hsp > 0 ) {
    sprite_index = spr_player_right;
} else if (hsp < 0)
    sprite_index = spr_player_left;
    
    
//scr_dash_state
len = spd*4;

//Move
hsp = lengthdir_x(len, dir);
vsp = lengthdir_y(len, dir);

phy_position_x += hsp;
phy_position_y += vsp;

//Create Dash Effect
var dash = instance_create(x, y, obj_dash_effect);
dash.sprite_index = sprite_index;
dash.image_index = image_index;




//scr_frozen_state
image_blend = c_aqua;



//scr_swish_state
image_speed = 0.5;

switch (sprite_index) {
    case spr_player_down:
    sprite_index = spr_swish_down;
    break;

    case spr_player_up:
    sprite_index = spr_swish_up;
    break;
    
    case spr_player_left:
    sprite_index = spr_swish_left;
    break;

    case spr_player_right:
    sprite_index = spr_swish_right;
    break;    
}

if (image_index >= 3 && swished == false) {
var xx = 0;
var yy = 0;
    switch (sprite_index) {
        case spr_swish_down:
        xx = x;
        yy = y +12;
        break;
    
        case spr_swish_up:
        xx = x;
        yy = y - 10;
        break;
        
        case spr_swish_left:
        xx = x - 10;
        yy = y + 2;
        break;
    
        case spr_swish_right:
        xx = x +10;
        yy = y +2
        break; 
    }
    var damage = instance_create(xx, yy, obj_damage);
    damage.creator = id;
    swished = true;
}



//**Create the following objects
//obj_player, obj_wall, obj_view, obj_dash_effect, obj_enemy_slime, obj_lifeform, obj_damage


//obj_lifeform Create 
phy_fixed_rotation = true;
hp = 3;


//obj_lifeform Step
depth = -y;
if (hp <= 0) {
instance_destroy();
}


//obj_lifeform Collision with obj_wall
//Collide


//obj_lifeform Collision with obj_lifeform
//Collide



//obj_player spr_player_down **uses physics **collision box (4,12) (12,12) (12,20) (4,20)
//Density 0.5, linear damping 5, friction 0.2
//Parent obj_lifeform

//obj_player Create Event
event_inherited();
scr_get_input();
spd = 2;
hsp = 0;
vsp = 0;
dir = 0;
len = 0;
image_speed = 0;
state = scr_move_state;
swished = false;



//obj_player Alarm 0
//Dash State Alarm
state = scr_move_state;


//obj_player Step
event_inherited();
scr_get_input();
script_execute(state);


//obj_player Animation End
//Change back to move state
if (state == scr_swish_state) {
    state = scr_move_state;
    swished = false;
    }
    
    
//obj_player Draw
draw_sprite(spr_shadow, image_index, x, y);
draw_self();


//obj_wall **uses physics **box collision
//Density 0, Linear Damping 0.1, Friction 0.2


//obj_view Step 
if (instance_exists(obj_player)) {
x += (obj_player.x - x) * 0.1;
y += (obj_player.y - y) * 0.1;
};




//obj_dash_effect Create 
image_alpha = 0.5;


//obj_dash_effect Step
//fade
if (image_alpha > 0) {
image_alpha -= .1
} else {
instance_destroy();
}




//obj_enemy_slime **uses physics **parent obj_lifeform spr_enemy_slime
//Density 0.5, Linear 5, friction 0.2

//obj_enemy_slime Create
event_inherited();
image_speed = 0.1
spd = 0.25;



//obj_enemy_slime Step
//Move towards player
event_inherited();
if (instance_exists(obj_player)) {
phy_position_x += (sign(obj_player.x - x)) * spd;
phy_position_y += (sign(obj_player.y - y)) * spd;
};



//obj_lifeform Create
phy_fixed_rotation = true;
hp = 3;


//obj_lifeform Step
depth = -y;
if (hp <= 0) {
instance_destroy();
}


//obj_lifeform Collision with obj_wall
//Collide



//obj_lifeform Collision with obj_lifeform
//Collide




//obj_damage uncheck visable, uses physics Collision Circle, spr_damage
//Density 0.5, Linear 0.1, Friction 0.2

//obj_damage Create 
damage = 1;
knockback = 10;
creator = noone;
alarm[0] = 1;


//obj_damage Alarm 0 
instance_destroy();


//obj_damage Collision with obj_lifeform
//Cause damage
if (other.id != creator) {
    other.hp -= damage;
    //Apply knockback
    var dir = point_direction(creator.x, creator.y, other.x, other.y);
    var xforce = lengthdir_x(knockback, dir);
    var yforce = lengthdir_y(knockback, dir);
    with (other) {
        physics_apply_impulse(x, y, xforce, yforce);
    }
}

